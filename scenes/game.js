const { Scenes } = require('telegraf');
const Game = require('../models/Game');
const User = require('../models/User');
const search = require('../utils/Search');
const crypto = require('crypto');
const GitHubFileFetcher = require('../utils/GitHubFileFetcher')

const gameScene = new Scenes.BaseScene('gameScene');

const fetcher = new GitHubFileFetcher();

const EXP_WINNER = 100; // –û–ø—ã—Ç–∞ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
const EXP_RANDOM_USER_MULTIPLIER = 0.5; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É
gameScene.enter(async (ctx) => {
  const user = ctx.session.user;

  if (!user) {
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
  let activeGame = await Game.findOne({
    users: user._id,
    completed: false,
  });

  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
  if (activeGame) {
    if(activeGame.users[1].tgId === ctx.from.id) return ctx.reply('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.');
    const otherUserId = activeGame.users.find(id => id !== user._id);
    const randomUser = await User.findById(otherUserId);

    await ctx.replyWithHTML(`
      üéÆ <b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É!</b>

      üîé <i>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</i> –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:  
      üìù <b>${activeGame.task}</b>(–î–∞, –∑–Ω–∞—é –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –≤ Instagram)

      üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>  
      üë§ –ò–º—è: <b>${randomUser.lastName} ${randomUser.firstName}</b>  
      üéì –ö—É—Ä—Å: <b>${randomUser.course}</b>

      üí¨ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥!
      
      –£–¥–∞—á–∏! üçÄ
    `);

    ctx.scene.state.game = activeGame;
    return;
  }

  // –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const randomUser = await search(user);

  if (!randomUser) {
    return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  const taskFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/all.txt')
  const tasks = taskFile.split('\n')

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  const newGame = new Game({
    users: [user._id, randomUser._id],
    task: tasks[0, crypto.randomInt(0, tasks.length)],
  });

  await newGame.save();

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –ø—Ä–æ—Ñ–∏–ª—è
      const photos = await ctx.telegram.getUserProfilePhotos(randomUser.tgId);

      if (photos.total_count === 0) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      } else {

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è file_id
        const sendPhotoPromises = photos.photos.slice(0, 3).map((photoGroup) => {
          const fileId = photoGroup[photoGroup.length - 1].file_id; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
          return ctx.replyWithPhoto(fileId);
        });

        await Promise.all(sendPhotoPromises);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.');
  }

  await ctx.replyWithHTML(`
    üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

    üîé <i>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</i> –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:  
    üìù <b>${newGame.task}</b>(–î–∞, –∑–Ω–∞—é –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –≤ Instagram)

    üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>  
    üë§ –ò–º—è: <b>${randomUser.lastName} ${randomUser.firstName}</b>  
    üéì –ö—É—Ä—Å: <b>${randomUser.course}</b>

    üí¨ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥. –£–¥–∞—á–∏! üçÄ
  `);

  await ctx.telegram.sendMessage(
    randomUser.tgId,
    `
    üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

    –ö –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.  
    –ö–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: üìù <b>code_${newGame.code}</b>  
    –£–¥–∞—á–∏! üçÄ
    `,
    { parse_mode: 'HTML' }
  );

  await User.findByIdAndUpdate(user._id, { 'gameList.isActive': true });
  await User.findByIdAndUpdate(randomUser._id, { 'gameList.isActive': true });

  ctx.scene.state.game = newGame;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
gameScene.on('text', async (ctx) => {
  const inputCode = ctx.message.text.trim();
  const game = ctx.scene.state.game;

  if (!game) {
    return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
  }

  if (inputCode === `code_${game.code}`) {

    try {
      console.log(game)
      const winner = await User.findById(game.users[0]);
      const randomUser = await User.findById(game.users[1]);

      const winnerId = winner._id;
      const randomUserId = randomUser._id;
      
      const expRandomUser = Math.round(EXP_WINNER * EXP_RANDOM_USER_MULTIPLIER);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
      await Promise.all([
        User.findByIdAndUpdate(winnerId, {
          $inc: { exp: EXP_WINNER * 2 },
          $set: { 'gameList.isActive': false },
        }),
        User.findByIdAndUpdate(randomUserId, {
          $inc: { exp: expRandomUser },
          $set: { 'gameList.isActive': false },
        }),
        Game.findByIdAndUpdate(game._id, { $set: { completed: true, started: false } }),
      ]);

      // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      await ctx.replyWithHTML(`
        ‚úÖ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

        üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${EXP_WINNER * 2} –æ–ø—ã—Ç–∞</b>.  
        üéâ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª <b>${expRandomUser} –æ–ø—ã—Ç–∞</b>.

        üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>  
        –ò–º—è: <b>${randomUser.firstName} ${randomUser.lastName}</b>  
        –í–æ–∑—Ä–∞—Å—Ç: <b>${randomUser.age}</b>  
        –ö—É—Ä—Å: <b>${randomUser.course}</b>  
      `);

      ctx.telegram.sendMessage(randomUser.tgId, `
        ‚úÖ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
        üë§ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –±—ã–ª: <b>${winner.firstName} ${winner.lastName}</b>.
        üìà –í–æ–∑—Ä–∞—Å—Ç: <b>${winner.age}</b>  
        üî¢ –ö—É—Ä—Å: <b>${winner.course}</b> 
        üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${expRandomUser} –æ–ø—ã—Ç–∞</b>. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!
      `, { parse_mode: 'HTML' });
      ctx.session.game = null;

      ctx.scene.enter("nameScene");
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else {
    ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

module.exports = gameScene;