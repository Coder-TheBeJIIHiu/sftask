const { Scenes } = require('telegraf');
const Game = require('../models/Game');
const User = require('../models/User');
const search = require('../utils/Search');
const crypto = require('crypto');
const GitHubFileFetcher = require('../utils/GitHubFileFetcher');

const gameScene = new Scenes.BaseScene('gameScene');

const fetcher = new GitHubFileFetcher();

const EXP_WINNER = 100; // –û–ø—ã—Ç–∞ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
const EXP_RANDOM_USER_MULTIPLIER = 0.5; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async function handleDebugError(ctx, error, errorCode = 'UNKNOWN') {
  console.error(`[${errorCode}] –û—à–∏–±–∫–∞:`, error.message);
  console.error(`[${errorCode}] Stack trace:`, error.stack);

  // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorMessage = `
    ‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    üÜî –ö–æ–¥ –æ—à–∏–±–∫–∏: ${errorCode}
    üìú –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: ${error.message}
    ü§° Error stack:
    > ${error.stack}
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @sfek_hub!
  `;

  try {
    await ctx.reply(errorMessage);
  } catch (sendError) {
    console.error(`[${errorCode}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:`, sendError);
  }
}

// –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É
gameScene.enter(async (ctx) => {
  try {
    const user = await User.findOne({ tgId: ctx.from.id });

    if (!user) {
      return await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    const lastGameId = await getLastGameId(user._id);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    let activeGame = await Game.findOne({
      _id: { $in: lastGameId },
      completed: false,
    });

    if (activeGame) {
      if (!user.gameList.isActive) {
        return;
      }

      const game = activeGame;
      const fiveMinutesLater = new Date(activeGame.startTime.getTime() + 5 * 60 * 1000)
      
      if (Date.now() > fiveMinutesLater) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ
        await Game.findByIdAndUpdate(game._id, { 
          completed: true,
          started: false,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤
        await Promise.all([
            User.findByIdAndUpdate(game.users[0], { $set: { 'gameList.isActive': false } }),
            User.findByIdAndUpdate(game.users[1], { $set: { 'gameList.isActive': false } }),
        ]);

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
        const [user1, user2] = await Promise.all([
          User.findById(game.users[0]),
          User.findById(game.users[1]),
        ]);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥
        const message = `
            ‚ùå <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.</b>

            üîì <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö:</b>
            üë§ –ò–≥—Ä–æ–∫ 1: <b>${user1.lastName} ${user1.firstName}</b>
            üë§ –ò–≥—Ä–æ–∫ 2: <b>${user2.lastName} ${user2.firstName}</b>

            üìù <b>–ö–æ–¥ –∏–≥—Ä—ã:</b> <code>${game.code}</code>
          `;

        await Promise.all([
            ctx.telegram.sendMessage(user1.tgId, message, { parse_mode: 'HTML' }),
            ctx.telegram.sendMessage(user2.tgId, message, { parse_mode: 'HTML' }),
          ]);

          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
        return ctx.scene.enter('nameScene');
      }
      
      const gameOwner = await User.findById(activeGame.users[0]);
      const randomUser = await User.findById(activeGame.users[1]);

      if (activeGame.users[1].tgId === ctx.from.id) {
        return ctx.reply('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.');
      }

      await ctx.telegram.sendMessage(gameOwner.tgId, `
        üéÆ <b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É!</b>

        üîé <i>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</i> –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:  
        üìù <b>${activeGame.task}</b>

        üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>  
        üë§ –ò–º—è: <b>${randomUser.lastName} ${randomUser.firstName}</b>  
        üéì –ö—É—Ä—Å: <b>${randomUser.course}</b>

        üí¨ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥!

        –£–¥–∞—á–∏! üçÄ
      `, { parse_mode: 'HTML' });

      return ctx.scene.state.game = activeGame;
    }
    
    // –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    const randomUser = await search(user);

    if (!randomUser) {
      return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ GitHub
    const taskFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/all.txt');
    const tasks = taskFile.split('\n');
    const randomTask = tasks[crypto.randomInt(0, tasks.length)];

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    const newGame = new Game({
      users: [user._id, randomUser._id],
      task: randomTask,
      code: crypto.randomInt(100000, 999999),
    });
   
    try {
      await Promise.all([
        clearTimeout(ctx.session.timeout),
        newGame.save(),
        addGame(user._id, newGame._id),
        addGame(randomUser._id, newGame._id),
        User.updateMany(
          { _id: { $in: [user._id, randomUser._id] } },
          { $set: { 'gameList.isActive': true } },
        ),
      ]);
    } catch (error) {
      await handleDebugError(ctx, error, 'GAME_SAVE_ERROR');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã
    try {
      const photos = await ctx.telegram.getUserProfilePhotos(randomUser.tgId);
      if (photos.total_count > 0) {
        const photoGroup = photos.photos.slice(0, 3);
        for (const group of photoGroup) {
          const fileId = group[group.length - 1].file_id;
          await ctx.replyWithPhoto(fileId);
        }
      } else {
        ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      }
    } catch (err) {
      await handleDebugError(ctx, err, 'PROFILE_PHOTO_ERROR');
    }

    await ctx.replyWithHTML(`
      üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

      üîé <i>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</i> –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:  
      üìù <b>${newGame.task}</b>

      üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>  
      üë§ –ò–º—è: <b>${randomUser.lastName} ${randomUser.firstName}</b>  
      üéì –ö—É—Ä—Å: <b>${randomUser.course}</b>

      üí¨ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥. –£–¥–∞—á–∏! üçÄ
    `);

    await ctx.telegram.sendMessage(randomUser.tgId, `
      üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

      –ö –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.  
      –ö–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: üìù <b>code_${newGame.code}</b>  
      –£–¥–∞—á–∏! üçÄ
    `, { parse_mode: 'HTML' });

    ctx.scene.state.game = newGame;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    ctx.session.timeout = setTimeout(async () => {
      const game = ctx.scene.state.game;
      
      if (game && !game.completed) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ
        await Game.findByIdAndUpdate(game._id, { 
          completed: true,
          started: false,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤
        await Promise.all([
            User.findByIdAndUpdate(game.users[0], { $set: { 'gameList.isActive': false } }),
            User.findByIdAndUpdate(game.users[1], { $set: { 'gameList.isActive': false } }),
        ]);

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
        const [user1, user2] = await Promise.all([
          User.findById(game.users[0]),
          User.findById(game.users[1]),
        ]);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥
        const message = `
            ‚ùå <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.</b>

            üîì <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö:</b>
            üë§ –ò–≥—Ä–æ–∫ 1: <b>${user1.lastName} ${user1.firstName}</b>
            üë§ –ò–≥—Ä–æ–∫ 2: <b>${user2.lastName} ${user2.firstName}</b>

            üìù <b>–ö–æ–¥ –∏–≥—Ä—ã:</b> <code>${game.code}</code>
          `;

        await Promise.all([
            ctx.telegram.sendMessage(user1.tgId, message, { parse_mode: 'HTML' }),
            ctx.telegram.sendMessage(user2.tgId, message, { parse_mode: 'HTML' }),
          ]);

          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
        return ctx.scene.enter('nameScene');
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  } catch (error) {
    await handleDebugError(ctx, error, 'GAME_ENTRY_ERROR');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
gameScene.on('text', async (ctx) => {
  try {
    const inputCode = ctx.message.text.trim();
    const game = ctx.scene.state.game;

    if (!game) {
      return ctx.scene.enter('nameScene');
    }

    if (game.users[1] === ctx.from.id) {
      await Promise.all([
        User.findByIdAndUpdate(game.users[0], {
          $set: { 'gameList.isActive': false },
        }),
        User.findByIdAndUpdate(game.users[1], {
          $set: { 'gameList.isActive': false },
        }),
        Game.findByIdAndUpdate(game._id, { 
          started: false,
          completed: true,
        }),
      ]);
      await ctx.reply('‚ùå –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ!');
      return ctx.scene.enter('nameScene');
    }

    if (inputCode === `code_${game.code}`) {
      const winner = await User.findById(game.users[0]);
      const randomUser = await User.findById(game.users[1]);
      const expRandomUser = Math.round(EXP_WINNER * EXP_RANDOM_USER_MULTIPLIER);

      await Promise.all([
        User.findByIdAndUpdate(winner._id, {
          $inc: { exp: EXP_WINNER * 2 },
          $set: { 'gameList.isActive': false },
        }),
        User.findByIdAndUpdate(randomUser._id, {
          $inc: { exp: expRandomUser },
          $set: { 'gameList.isActive': false },
        }),
        Game.findByIdAndUpdate(game._id, { 
          started: false,
          completed: true,
        }),
      ]);

      await ctx.replyWithHTML(`
        ‚úÖ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

        üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${EXP_WINNER * 2} –æ–ø—ã—Ç–∞</b>.  
        üéâ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª <b>${expRandomUser} –æ–ø—ã—Ç–∞</b>.
      `);

      await ctx.telegram.sendMessage(randomUser.tgId, `
        ‚úÖ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
        üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${expRandomUser} –æ–ø—ã—Ç–∞</b>. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! (–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é)
      `, { parse_mode: 'HTML' });

      ctx.scene.enter('nameScene');
    } else {
      ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  } catch (error) {
    await handleDebugError(ctx, error, 'GAME_FINISH_ERROR');
  }
});

// –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ gameList
async function addGame(userId, gameId) {
  try {
    await User.findByIdAndUpdate(
      userId,
      { $push: { 'gameList.gameList': { gameId } } },
      { new: true }
    );
  } catch (err) {
    console.error('–æ—à–∏–±–∫–∞', err);
  }
}

async function getLastGameId(userId) {
  const user = await User.findById(userId)
  if (user && user.gameList.gameList.length > 0) {
    const lastGame = user.gameList.gameList[user.gameList.gameList.length - 1];
    return lastGame.gameId;
  } else {
    return null;
  }
}

module.exports = gameScene;