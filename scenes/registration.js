const { Scenes, Markup } = require('telegraf');
const User = require('../models/User');
const guessGender = require('../utils/Gender');
const guessAge = require('../utils/Age');

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
const restartButton = Markup.inlineKeyboard([
  Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'restart_registration'),
]);

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
async function handleRestart(ctx) {
  ctx.session.registrationData = null;
  ctx.scene.enter('nameScene');
}

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏
const nameRegex = /^[–ê-–Ø–∞-—è“ö“õ“í“ì“Æ“Ø“∞“±”ò”ô”®”©–Ü—ñ“∫“ª–Å—ë\s'-]+$/;

// –°—Ü–µ–Ω–∞: –≤–≤–æ–¥ –∏–º–µ–Ω–∏
const nameScene = new Scenes.BaseScene('nameScene');
nameScene.enter(async (ctx) => {
  const user = await User.findOne({ tgId: ctx.from.id });

  if (!user) {
    return ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'
    );
  }

  return ctx.scene.enter('menuScene');
});
nameScene.on('text', (ctx) => {
  const firstName = ctx.message.text.trim();

  if (!nameRegex.test(firstName)) {
    return ctx.reply(
      '‚ùó –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è –∫–∞–∑–∞—Ö—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç), –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.',
      restartButton
    );
  }

  ctx.session.registrationData = { firstName };
  ctx.scene.enter('lastNameScene');
});
nameScene.on('message', (ctx) =>
  ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.', restartButton)
);
nameScene.action('restart_registration', handleRestart);

// –°—Ü–µ–Ω–∞: –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
const lastNameScene = new Scenes.BaseScene('lastNameScene');
lastNameScene.enter((ctx) =>
  ctx.reply('üòä –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', restartButton)
);
lastNameScene.on('text', async (ctx) => {
  const lastName = ctx.message.text.trim();

  if (!nameRegex.test(lastName)) {
    return ctx.reply(
      '‚ùó –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è –∫–∞–∑–∞—Ö—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç), –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.',
      restartButton
    );
  }

  ctx.session.registrationData.lastName = lastName;

  const user = await User.findOne({
    firstName: ctx.session.registrationData.firstName,
    lastName: ctx.session.registrationData.lastName,
  });

  if (user) {
    ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    return await handleRestart(ctx);
  }

  ctx.scene.enter('ageScene');
});
lastNameScene.on('message', (ctx) =>
  ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.', restartButton)
);
lastNameScene.action('restart_registration', handleRestart);

// –°—Ü–µ–Ω–∞: –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
const ageScene = new Scenes.BaseScene('ageScene');
ageScene.enter((ctx) =>
  ctx.reply('üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:', restartButton)
);
ageScene.on('text', (ctx) => {
  const age = parseInt(ctx.message.text, 10);

  if (isNaN(age) || age <= 0) {
    return ctx.reply(
      '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).',
      restartButton
    );
  }

  if (age > 21) {
    return ctx.reply(
      'üö´ –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤–∞–º –Ω–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å. üò¢',
      restartButton
    );
  }

  ctx.session.registrationData.age = age;
  ctx.scene.enter('genderScene');
});
ageScene.on('message', (ctx) =>
  ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.', restartButton)
);
ageScene.action('restart_registration', handleRestart);

// –°—Ü–µ–Ω–∞: –≤—ã–±–æ—Ä –ø–æ–ª–∞
const genderScene = new Scenes.BaseScene('genderScene');
genderScene.enter(async (ctx) => {
  const guessedGender = guessGender(
    ctx.session.registrationData.firstName,
    ctx.session.registrationData.lastName
  );

  await ctx.reply(
    `‚öß –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª: 
üí° –ö–∞–∂–µ—Ç—Å—è, –≤—ã ${guessedGender} –ø–æ–ª.`,
    Markup.inlineKeyboard([
      [
        Markup.button.callback('üôé‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π', 'gender_male'),
        Markup.button.callback('üôé‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π', 'gender_female'),
      ],
      [Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'restart_registration')],
    ])
  );
});
genderScene.action(['gender_male', 'gender_female'], (ctx) => {
  ctx.session.registrationData.gender =
    ctx.callbackQuery.data === 'gender_male' ? 'male' : 'female';
  ctx.scene.enter('courseScene');
});
genderScene.action('restart_registration', handleRestart);

// –°—Ü–µ–Ω–∞: –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
const courseScene = new Scenes.BaseScene('courseScene');
courseScene.enter(async (ctx) => {
  const guessedCourse = guessAge(ctx.session.registrationData.age);

  await ctx.reply(
    `üéì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:
üí° –ö–∞–∂–µ—Ç—Å—è, –≤—ã ${guessedCourse} –∫—É—Ä—Å.`,
    Markup.inlineKeyboard([
      [
        Markup.button.callback('1Ô∏è‚É£ 1 –∫—É—Ä—Å', 'course_1'),
        Markup.button.callback('2Ô∏è‚É£ 2 –∫—É—Ä—Å', 'course_2'),
      ],
      [
        Markup.button.callback('3Ô∏è‚É£ 3 –∫—É—Ä—Å', 'course_3'),
        Markup.button.callback('4Ô∏è‚É£ 4 –∫—É—Ä—Å', 'course_4'),
      ],
      [Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'restart_registration')],
    ])
  );
});
courseScene.action(/^course_(\d)$/, async (ctx) => {
  const course = parseInt(ctx.callbackQuery.data.split('_')[1], 10);
  ctx.session.registrationData.course = course;

  const { firstName, lastName, age, gender } = ctx.session.registrationData;
  const newUser = new User({
    tgId: ctx.from.id,
    firstName,
    lastName,
    age,
    gender,
    course,
  });

  const ref = ctx.session.ref;

  if (ref) {
    const usr = await User.findOne({ _id: ref });
    if (usr) {
      await User.findOneAndUpdate(
        { _id: usr._id },
        { $push: { joins: newUser._id } },
        { new: true }
      );
      await ctx.telegram.sendMessage(
        usr.tgId,
        `üë§ <a href="tg://user?id=${ctx.from.id}">${lastName} ${firstName}</a> - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏.`,
        {
          parse_mode: 'HTML',
        }
      );
    }
  }

  await newUser.save();
  ctx.session.user = newUser;
  ctx.session.registrationData = null;

  await ctx.reply(
    '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    restartButton
  );
  ctx.scene.enter('menuScene');
});
courseScene.action('restart_registration', handleRestart);

module.exports = [nameScene, lastNameScene, ageScene, genderScene, courseScene];