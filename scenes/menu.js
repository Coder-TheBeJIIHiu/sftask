const { Scenes, Markup } = require('telegraf');
const GitHubFileFetcher = require('../utils/GitHubFileFetcher');
const getTop10WithExp = require('../utils/Top');
const crypto = require('crypto'); // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç crypto

const fetcher = new GitHubFileFetcher();

// –°—Ü–µ–Ω–∞ –º–µ–Ω—é
const menuScene = new Scenes.BaseScene('menuScene');

menuScene.enter(async (ctx) => {
  const helloFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/hello.txt');
  const quoteFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/quotes.txt')
  const quotes = quoteFile.split('\n')
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ctx.replyWithHTML(`${helloFile}\n\n<code>${quotes[crypto.randomInt(0, quotes.length)]}</code>`, Markup.inlineKeyboard([
    [
      Markup.button.callback('s·¥á·¥Ä Ä·¥Ñ ú üîç ', 'random'),
      // Markup.button.callback(' ü·¥è·¥†·¥á ü´∂üèª', 'love')
    ],
    [
      Markup.button.callback('·¥ò Ä·¥èÍú∞…™ ü·¥á üë§', 'profile'),
      Markup.button.callback('·¥õ·¥è·¥ò üìä', 'top')
    ],
    [
      Markup.button.callback('…¥·¥á·¥õ·¥°·¥è Ä·¥ã  ô·¥è·¥ès·¥õ·¥á Ä üìà', 'network_booster'),
    ],
    [
      Markup.button.callback(' ú·¥è·¥° ·¥õ·¥è ·¥ò ü·¥Ä è ‚ùì', 'how_to_play')
    ]
  ]));
});

menuScene.action('network_booster', async (ctx) => {
  // ctx.scene.enter('NBScene');
  return await ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
})

menuScene.action('profile', async (ctx) => {
  const user = ctx.session.user; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ctx.session.user

    if (!user) {
      return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!');
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    const genderIcon = user.gender === 'male' ? 'üë®‚Äçüíº' : 'üë©‚Äçüíº';
    const activeGameStatus = user.gameList.isActive
      ? 'üéÆ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç'
      : 'üõå –ù–µ –∏–≥—Ä–∞–µ—Ç';

    // –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞
    const lastGame =
      user.gameList.gameList.length > 0
        ? user.gameList.gameList[user.gameList.gameList.length - 1].gameId
        : null;

    const profileText = `
  <b>üåü –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} ${user.lastName[0]}.</b>

  ID: <code>${user._id}</code>
  –í–æ–∑—Ä–∞—Å—Ç: <b>${user.age} –ª–µ—Ç</b>
  –ü–æ–ª: <b>${genderIcon} ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</b>
  –ö—É—Ä—Å: <b>${user.course}-–π –∫—É—Ä—Å</b>
  –û–ø—ã—Ç: <b>üèÜ ${user.exp} XP</b>
  –ò–≥—Ä: <b>üéÆ ${user.gameList.gameList.length}</b>
  
  –†–µ—Ñ–µ—Ä–∞–ª: <b>https://t.me/task_shbot/?start=${user._id} (${user.joins.length})</b>

  üé≤ –°—Ç–∞—Ç—É—Å –∏–≥—Ä: <b>${activeGameStatus}</b>
  ${
    lastGame
      ? `–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: <b>ID ${lastGame}</b>`
      : '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö'
  }
    `;

    // –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback('üéÆ –ú–æ–∏ –∏–≥—Ä—ã', 'my_games')],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'update_profile')],
    ]);

    await ctx.reply(profileText.trim(), {
      parse_mode: 'HTML',
    })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
menuScene.action('random', async (ctx) => {
  ctx.scene.enter('gameScene')
});

menuScene.action('top', async (ctx) => {
  try {
    const { topUsers, userRank, userExp } = await getTop10WithExp(ctx.session.user._id);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–æ–ø-10
    let response = '<b>üèÜ –¢–æ–ø-10</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É:\n\n';
    topUsers.forEach((user, index) => {
      response += `${index + 1}. <a href="tg://user?id=${user.tgId}">${user.firstName} ${user.lastName[0]}.</a> ‚Äî <b>${user.exp} –æ–ø—ã—Ç–∞</b>\n`;
    });

    response += '\n';

    if (userExp > 1) {
      response += `–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:<b> ${userRank}-–µ –º–µ—Å—Ç–æ</b>\n`;
      response += `–í–∞—à –æ–ø—ã—Ç:<b> ${userExp}</b>`;
    } else {
      response += '–í—ã –µ—â—ë –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞!';
    }

    await ctx.reply(response, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /top:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
})

menuScene.action('how_to_play', async (ctx) => {
  try {
    const startText = await fetcher.fetchFile("https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/howtoplay.txt");
    if (!startText) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.');
    }

    const message = await ctx.reply(startText, {
      parse_mode: 'HTML'
    });

    setTimeout(() => {
      ctx.deleteMessage(message.message_id);
    }, 20000);
  } catch (err) {
    console.error(err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
  }
});

module.exports = menuScene;