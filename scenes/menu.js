const { Scenes, Markup } = require('telegraf');
const GitHubFileFetcher = require('../utils/GitHubFileFetcher');
const getTop10WithExp = require('../utils/Top');
const crypto = require('crypto'); // –∏–º–ø–æ—Ä—Ç crypto

const fetcher = new GitHubFileFetcher();

// —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –º–µ–Ω—é
const menuScene = new Scenes.BaseScene('menuScene');

menuScene.enter(async (ctx) => {
  try {
    // –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    const helloFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/hello.txt');
    const quoteFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/quotes.txt');

    if (!helloFile || !quoteFile) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ü–∏—Ç–∞—Ç—ã.');
    }

    const quotes = quoteFile.split('\n');
    const randomQuote = quotes[crypto.randomInt(0, quotes.length)];

    await ctx.replyWithHTML(
      `${helloFile}\n\n<code>${randomQuote}</code>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('s·¥á·¥Ä Ä·¥Ñ ú üîç ', 'search')],
        [Markup.button.callback('·¥ò Ä·¥èÍú∞…™ ü·¥á üë§', 'profile'), Markup.button.callback('·¥õ·¥è·¥ò üìä', 'top')],
        [Markup.button.callback('…¥·¥á·¥õ·¥°·¥è Ä·¥ã  ô·¥è·¥ès·¥õ·¥á Ä üìà', 'network_booster')],
        [Markup.button.callback(' ú·¥è·¥° ·¥õ·¥è ·¥ò ü·¥Ä è ‚ùì', 'how_to_play')]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ network_booster
menuScene.action('network_booster', async (ctx) => {
  await ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
menuScene.action('profile', async (ctx) => {
  try {
    const user = ctx.session.user;

    if (!user) {
      return ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
    }

    const genderIcon = user.gender === 'male' ? 'üë®‚Äçüíº' : 'üë©‚Äçüíº';
    const activeGameStatus = user.gameList?.isActive ? 'üéÆ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç' : 'üõå –ù–µ –∏–≥—Ä–∞–µ—Ç';
    const lastGame = user.gameList?.gameList?.length > 0
      ? user.gameList.gameList[user.gameList.gameList.length - 1].gameId
      : '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö';

    const profileText = `
<b>üåü –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} ${user.lastName?.[0]}.</b>

ID: <code>${user._id}</code>
–í–æ–∑—Ä–∞—Å—Ç: <b>${user.age} –ª–µ—Ç</b>
–ü–æ–ª: <b>${genderIcon} ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</b>
–ö—É—Ä—Å: <b>${user.course || '‚Äî'}-–π –∫—É—Ä—Å</b>
–û–ø—ã—Ç: <b>üèÜ ${user.exp || 0} XP</b>
–ò–≥—Ä: <b>üéÆ ${user.gameList?.gameList?.length || 0}</b>

–†–µ—Ñ–µ—Ä–∞–ª: <b>https://t.me/task_shbot/?start=${user._id} (${user.joins?.length || 0})</b>

üé≤ –°—Ç–∞—Ç—É—Å –∏–≥—Ä: <b>${activeGameStatus}</b>
–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: <b>${lastGame}</b>
    `.trim();

    await ctx.reply(profileText, {
      parse_mode: 'HTML'
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø–∞
menuScene.action('top', async (ctx) => {
  try {
    const { topUsers, userRank, userExp } = await getTop10WithExp(ctx.session.user?._id || '');
    let response = '<b>üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É:</b>\n\n';

    topUsers.forEach((user, index) => {
      response += `${index + 1}. <a href="tg://user?id=${user.tgId}">${user.firstName} ${user.lastName?.[0]}.</a> ‚Äî <b>${user.exp} –æ–ø—ã—Ç–∞</b>\n`;
    });

    if (userRank && userExp) {
      response += `\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>${userRank}-–µ –º–µ—Å—Ç–æ</b>\n–í–∞—à –æ–ø—ã—Ç: <b>${userExp}</b>`;
    } else {
      response += '\n‚ùå –í—ã –µ—â—ë –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞!';
    }

    await ctx.reply(response, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
menuScene.action('how_to_play', async (ctx) => {
  try {
    const startText = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/howtoplay.txt');

    if (!startText) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.');
    }

    const message = await ctx.reply(startText, { parse_mode: 'HTML' });
    setTimeout(() => ctx.deleteMessage(message.message_id), 20000);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
  }
});


menuScene.action('search', async (ctx) => {
  ctx.scene.enter('gameScene');
})

module.exports = menuScene;