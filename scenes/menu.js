const { Scenes, Markup } = require('telegraf');
const GitHubFileFetcher = require('../utils/GitHubFileFetcher');
const getTop10WithExp = require('../utils/Top');
const crypto = require('crypto'); // –∏–º–ø–æ—Ä—Ç crypto
const os = require('os'); // –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è os

const Game = require('../models/Game');
const User = require('../models/User');

const fetcher = new GitHubFileFetcher();

// —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –º–µ–Ω—é
const menuScene = new Scenes.BaseScene('menuScene');

menuScene.enter(async (ctx) => {
  try {
    // –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    const helloFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/hello.txt');
    const quoteFile = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/quotes.txt');

    if (!helloFile || !quoteFile) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ü–∏—Ç–∞—Ç—ã.');
    }

    const quotes = quoteFile.split('\n');
    const randomQuote = quotes[crypto.randomInt(0, quotes.length)];

    await ctx.replyWithHTML(
      `${helloFile}\n\n<code>${randomQuote}</code>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('s·¥á·¥Ä Ä·¥Ñ ú üîç ', 'search')],
        [Markup.button.callback('·¥ò Ä·¥èÍú∞…™ ü·¥á üë§', 'profile'), Markup.button.callback('·¥õ·¥è·¥ò üìä', 'top')],
        [Markup.button.callback('…¢·¥Ä·¥ç·¥ás üé∞', 'games'),
        Markup.button.callback(' ô·¥è·¥õ s·¥õ·¥Ä·¥õs', 'botstats')],
        [Markup.button.callback(' ú·¥è·¥° ·¥õ·¥è ·¥ò ü·¥Ä è ‚ùì', 'how_to_play')]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ network_booster
menuScene.action('network_booster', async (ctx) => {
  await ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
menuScene.action('profile', async (ctx) => {
  try {
    const user = ctx.session.user;

    if (!user) {
      return ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
    }

    const genderIcon = user.gender === 'male' ? 'üë®‚Äçüíº' : 'üë©‚Äçüíº';
    const activeGameStatus = user.gameList?.isActive ? 'üéÆ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç' : 'üõå –ù–µ –∏–≥—Ä–∞–µ—Ç';
    const lastGame = user.gameList?.gameList?.length > 0
      ? user.gameList.gameList[user.gameList.gameList.length - 1].gameId
      : '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö';

    const profileText = `
<b>üåü –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} ${user.lastName?.[0]}.</b>

ID: <code>${user._id}</code>
–í–æ–∑—Ä–∞—Å—Ç: <b>${user.age} –ª–µ—Ç</b>
–ü–æ–ª: <b>${genderIcon} ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</b>
–ö—É—Ä—Å: <b>${user.course || '‚Äî'}-–π –∫—É—Ä—Å</b>
–û–ø—ã—Ç: <b>üèÜ ${user.exp || 0} XP</b>
–ò–≥—Ä: <b>üéÆ ${user.gameList?.gameList?.length || 0}</b>

–†–µ—Ñ–µ—Ä–∞–ª: <b>https://t.me/task_shbot/?start=${user._id} (${user.joins?.length || 0})</b>

üé≤ –°—Ç–∞—Ç—É—Å –∏–≥—Ä: <b>${activeGameStatus}</b>
–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: <b>${lastGame}</b>
    `.trim();

    await ctx.reply(profileText, {
      parse_mode: 'HTML'
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø–∞
menuScene.action('top', async (ctx) => {
  try {
    const { topUsers, userRank, userExp } = await getTop10WithExp(ctx.session.user?._id || '');
    let response = '<b>üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É:</b>\n\n';

    topUsers.forEach((user, index) => {
      response += `${index + 1}. <a href="tg://user?id=${user.tgId}">${user.firstName} ${user.lastName?.[0]}.</a> ‚Äî <b>${user.exp} –æ–ø—ã—Ç–∞</b>\n`;
    });

    if (userRank && userExp) {
      response += `\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>${userRank}-–µ –º–µ—Å—Ç–æ</b>\n–í–∞—à –æ–ø—ã—Ç: <b>${userExp}</b>`;
    } else {
      response += '\n‚ùå –í—ã –µ—â—ë –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞!';
    }

    await ctx.reply(response, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
menuScene.action('how_to_play', async (ctx) => {
  try {
    const startText = await fetcher.fetchFile('https://raw.githubusercontent.com/Coder-TheBeJIIHiu/SFEK-TASK/refs/heads/main/howtoplay.txt');

    if (!startText) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.');
    }

    const message = await ctx.reply(startText, { parse_mode: 'HTML' });
    setTimeout(() => ctx.deleteMessage(message.message_id), 20000);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
  }
});


menuScene.action('search', async (ctx) => {
  ctx.scene.enter('gameScene');
})

menuScene.action('games', async (ctx) => {
  try {
    const games = await Game.find()
      .sort({ startTime: -1 }) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
      .limit(10)
      .populate('users', 'firstName'); // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –∏—Ö –∏–º—è)

    if (games.length === 0) {
      return ctx.reply('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    let message = 'üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä:*\n\n';
    games.forEach((game, index) => {
      const players = game.users.map(user => user.firstName).join(' –∏—â–µ—Ç ') || '–ò–≥—Ä–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
      message += `*–ò–≥—Ä–∞ ${index + 1}:*\n` +
        `- –ó–∞–¥–∞—á–∞: ${game.task}\n` +
        `- –ö–æ–¥: ${game.code}\n` +
        `- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date(game.startTime).toLocaleString()}\n` +
        `- –ò–≥—Ä–æ–∫–∏: ${players}\n` +
        `- –°—Ç–∞—Ç—É—Å: ${game.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n\n`;
    });

    return ctx.replyWithMarkdown(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä.');
  }
})

menuScene.action('botstats', async (ctx) => {
  try {
    const getInfoSafely = async (fn, defaultValue) => {
      try {
        return await fn();
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: ${err.message}`);
        return defaultValue;
      }
    };

    const uptime = process.uptime();
    const memoryUsage = process.memoryUsage();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    const totalUsers = await getInfoSafely(() => User.countDocuments(), '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    const activeUsersLast24h = await getInfoSafely(() =>
      User.countDocuments({
        lastActive: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) },
      }),
      '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
    );

    const webhookInfo = await getInfoSafely(() => bot.telegram.getWebhookInfo(), {});
    const webhookStatus = webhookInfo.url ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    const webhookUrl = webhookInfo.url || '–ù–µ –∑–∞–¥–∞–Ω';
    const webhookPendingUpdates = webhookInfo.pending_update_count || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const totalGames = await getInfoSafely(() => Game.countDocuments(), '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    const activeGames = await getInfoSafely(() =>
      Game.find({ started: true, completed: false }),
      []
    );
    const completedGames = await getInfoSafely(() => Game.find({ completed: true }), []);

    const activeGamesInfo = activeGames.map((game) => {
      const users = game.users.length;
      const startTime = new Date(game.startTime).toLocaleString();
      return `- –ö–æ–¥: ${game.code}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users}, –°—Ç–∞—Ä—Ç: ${startTime}`;
    }).join('\n') || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä';

    const longestGame = completedGames.sort((a, b) =>
      (new Date(b.endTime) - new Date(b.startTime)) -
      (new Date(a.endTime) - new Date(a.startTime))
    )[0];

    const avgPlayersPerGame = completedGames.length > 0
      ? completedGames.reduce((sum, game) => sum + game.users.length, 0) / completedGames.length
      : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';

    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const totalMemory = (os.totalmem() / 1024 / 1024).toFixed(2);
    const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);
    const cpuUsage = os.loadavg().map(avg => avg.toFixed(2)).join(' / ');

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    const seconds = Math.floor(uptime % 60);
    const minutes = Math.floor((uptime / 60) % 60);
    const hours = Math.floor((uptime / 3600) % 24);
    const days = Math.floor(uptime / 86400);

    // –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const info = `
  üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*

  üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${days} –¥–Ω–µ–π, ${hours} —á–∞—Å–æ–≤, ${minutes} –º–∏–Ω—É—Ç, ${seconds} —Å–µ–∫—É–Ω–¥
  üë• *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${totalUsers}
  üë§ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞:* ${activeUsersLast24h}

  üéÆ *–ò–≥—Ä—ã:*
  - *–í—Å–µ–≥–æ –∏–≥—Ä:* ${totalGames}
  - *–ê–∫—Ç–∏–≤–Ω—ã—Ö:* ${activeGames.length}
  - *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:* ${completedGames.length}
  - *–°–∞–º–∞—è –¥–æ–ª–≥–∞—è –∏–≥—Ä–∞:* ${longestGame ? `${longestGame.code}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(new Date(longestGame.endTime) - new Date(longestGame.startTime)) / 60000} –º–∏–Ω—É—Ç` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
  - *–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:* ${avgPlayersPerGame}

  ${activeGames.length ? `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–∞—Ö:*\n${activeGamesInfo}` : ''}

  ‚öôÔ∏è *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
  - *–ü–∞–º—è—Ç—å:* ${freeMemory} MB —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ ${totalMemory} MB
  - *–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ (1/5/15 –º–∏–Ω):* ${cpuUsage}
  - *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:*
    - RSS: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB
    - Heap Total: ${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)} MB
    - Heap Used: ${(memoryUsage.heapUsed / 1024 / 1024).toFixed(2)} MB

  üåê *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:*
  - *–°—Ç–∞—Ç—É—Å:* ${webhookStatus}
  - *URL:* ${webhookUrl}
  - *–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* ${webhookPendingUpdates}

  üï∞Ô∏è *–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:* ${new Date().toLocaleString()}
  `;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await ctx.replyWithMarkdown(info);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /uptime:', error);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /uptime. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
})

module.exports = menuScene;